name: Super-Linter

on: push

jobs:
  super-lint:
    name: Lint code base
    runs-on: ubuntu-latest
    steps:
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v2.3.0
        
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Super-Linter
        uses: github/super-linter@v3.17.0
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  frogbot-scan:
    rules:
      - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
        when: manual
        variables:
          FROGBOT_CMD: "scan-pull-request"
        # Creating fix pull requests will be triggered by any push to the default branch.
        # You can change it to any other branch you want, for example:
        # if: $CI_COMMIT_BRANCH == "dev"
      - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
        variables:
          FROGBOT_CMD: "create-fix-pull-requests"
    when: manual
    variables:
      # [Mandatory only for projects which use npm, pip, pipenv, nuget and dotnet to download their dependencies]
      # The command that installs the project dependencies (e.g "npm i", "nuget restore" or "dotnet restore")
      JF_INSTALL_DEPS_CMD: ""

      # [Mandatory]
      # JFrog platform URL
      JF_URL: $JF_URL

      # [Mandatory if JF_ACCESS_TOKEN is not provided]
      # JFrog user and password with 'read' permissions for Xray
      JF_USER: $JF_USER
      JF_PASSWORD: $JF_PASSWORD

      # [Mandatory]
      # GitLab accesses token with the following permissions scopes: api, read_api, read_user, read_repository
      JF_GIT_TOKEN: $USER_TOKEN

      # Predefined GitLab variables. There's no need to set them.
      JF_GIT_PROVIDER: gitlab
      JF_GIT_OWNER: $CI_PROJECT_NAMESPACE
      JF_GIT_REPO: $CI_PROJECT_NAME
      JF_GIT_BASE_BRANCH: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
      JF_GIT_PULL_REQUEST_ID: $CI_MERGE_REQUEST_IID

      # Uncomment the below options if you'd like to use them.

      # [Optional, default: https://gitlab.com]
      # API endpoint to GitLab
      # JF_GIT_API_ENDPOINT: https://gitlab.example.com

      # [Mandatory if JF_USER and JF_PASSWORD are not provided]
      # JFrog access token with 'read' permissions for Xray
      # JF_ACCESS_TOKEN: $JF_ACCESS_TOKEN

      # [Optional, default: "."]
      # Relative path to the project in the git repository
      # JF_WORKING_DIR: path/to/project/dir

      # [Optional]
      # Xray Watches. Learn more about them here: https://www.jfrog.com/confluence/display/JFROG/Configuring+Xray+Watches
      # JF_WATCHES: <watch-1>,<watch-2>...<watch-n>

      # [Optional]
      # JFrog project. Learn more about it here: https://www.jfrog.com/confluence/display/JFROG/Projects
      # JF_PROJECT: <project-key>
    script:
      # For Linux / MacOS runner:
      - curl -fLg "https://releases.jfrog.io/artifactory/frogbot/v2/[RELEASE]/getFrogbot.sh" | sh
      - ./frogbot ${FROGBOT_CMD}

      # For Windows runner:
      # iwr https://releases.jfrog.io/artifactory/frogbot/v2/[RELEASE]/frogbot-windows-amd64/frogbot.exe -OutFile .\frogbot.exe
      # .\frogbot.exe ${FROGBOT_CMD}
